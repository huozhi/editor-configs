" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
" the call to :runtime you can find below.  If you wish to change any of those
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
" will be overwritten everytime an upgrade of the vim packages is performed.
" It is recommended to make changes after sourcing debian.vim since it alters
" the value of the 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.

runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
"if has("autocmd")
filetype plugin indent on
"endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
"set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden		" Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif


filetype on

filetype indent on

filetype plugin on

filetype plugin indent on


set nocompatible
set autoread
set shortmess=atI


let Tlist_Show_One_File=1
let Tlist_Exit_OnlyWindow=1

" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowb
set noswapfile

set paste
set mouse-=a
set selection=exclusive
set selectmode=mouse,key

" No annoying sound on errors

set noerrorbells
set novisualbell
set t_vb=
set tm=500


"==========================================
" show and format
"==========================================

set number
set nowrap
nnoremap <F2> :set nonumber!<CR>:set foldcolumn=0<CR>


set showmatch
" How many tenths of a second to blink when matching brackets
set mat=2

set hlsearch
set ignorecase
set incsearch
set smartcase

set foldenable
" manual
" indent
" expr
" syntax" diff" marker    ,  {{{  }}}
" set foldmethod=syntax
"set foldcolumn=4

set tabstop=4                " Tab        []
set shiftwidth=4
set expandtab                " Tab    [Tab Ctrl+V + Tab]
set autoindent
set ai "Auto indent
set si "Smart indent

"==========================================
" status
"==========================================
"
set ruler
""
set showcmd

" Set 7 lines to the cursor - when moving vertically using j/k ,
set so=7

set cursorline" 12
set cmdheight=2
"set rulerformat=%20(%2*%<%f%=\ %m%r\ %3l\ %c\ %p%%%)
"set statusline=%F%m%r%h%w\[POS=%l,%v][%p%%]\%{strftime(\"%d/%m/%y\ -\ %H:%M\")}
set statusline=%<%f\ %h%m%r%=%k[%{(&fenc==\"\")?&enc:&fenc}%{(&bomb?\",BOM\":\"\")}]\ %-14.(%l,%c%V%)\ %P
" Always show the status line
"set laststatus=2


"==========================================
"colors and fonts
"==========================================
"

syntax enable
syntax on
colorscheme monokai
" set background=dark

" transparent bgcolor
hi Normal ctermfg=252 ctermbg=none

set noai nosi
set paste
set mouse=v

" set t_Co=256

" Set extra options when running in GUI mode
" if has("gui_running")
"     set guioptions-=T
"     set guioptions+=e
"     set t_Co=256
"     set guitablabel=%M\ %t
" endif
"set guifont=Monaco:h20          "  &&
"==========================================
" file encode
"==========================================
"  UTF-8
set enc=2byte-gb18030
set fileencodings=utf-8,ucs-bom,gb18030,gbk,cp936,default
set termencoding=utf-8
set encoding=utf8
" gb18030  UTF-8  UTF-8

" Use Unix as the standard file type
set ffs=unix,dos,mac

" Unicode255
set formatoptions+=m
set formatoptions+=B


"==========================================
"others
"==========================================

autocmd! bufwritepost _vimrc source % " vimrc windows
autocmd! bufwritepost .vimrc source % " vimrc linux


set completeopt=longest,menu
set wildmenu
" Ignore compiled files
set wildignore=*.o,*~,*.pyc

" Python  tabautocmd FileType python set tabstop=4 shiftwidth=4 expandtab
"
autocmd FileType python set omnifunc=pythoncomplete#Complete


" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

" A buffer becomes hidden when it is abandoned
"set hid

" For regular expressions turn magic on
set magic

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

set laststatus=2

let g:go_disable_autoinstall=0


map <F10> :call Run()<CR>
func! Run()
    exec "w"
    if &filetype == 'c'
        exec "! ./%<"
    elseif &filetype == 'cpp'
        exec "! ./%<"
    elseif &filetype == 'py'
        exec "!python %"
    elseif &filetype == 'sh'
        exec "! ./%"    
    endif
endfunc


map <S-F9> :call Compile()<CR>
func! Compile()
    exec "w"
    if &filetype == 'c'
        exec "!gcc % -o %<"
    elseif &filetype == 'cpp'
        exec "!g++ -std=c++11 % -o %<"
    elseif &filetype == 'py'
        exec "!python %"
    elseif &filetype == 'sh'
        exec "!chmod a+x %"
    endif 
endfunc 

map <F9> :call CompileRun()<CR>
func! CompileRun()
    exec "w"
    if &filetype == 'c'
        exec "!gcc % -o %< && ./%<"
    elseif &filetype == 'cpp'
        exec "!g++ -std=c++11 % -o %< && ./%<"
    elseif &filetype == 'py'
        exec "!python %"
    elseif &filetype == 'sh'
        exec "!chmod a+x % && ./%"
    endif
endfunc
 
 
